{"ast":null,"code":"/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v21.0.1\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dragService_1 = require(\"../dragAndDrop/dragService\");\n\nvar componentAnnotations_1 = require(\"./componentAnnotations\");\n\nvar context_1 = require(\"../context/context\");\n\nvar popupService_1 = require(\"./popupService\");\n\nvar popupComponent_1 = require(\"./popupComponent\");\n\nvar utils_1 = require(\"../utils\");\n\nvar component_1 = require(\"./component\");\n\nvar Dialog =\n/** @class */\nfunction (_super) {\n  __extends(Dialog, _super);\n\n  function Dialog(config) {\n    var _this = _super.call(this, Dialog.TEMPLATE) || this;\n\n    _this.resizable = {};\n    _this.isResizable = false;\n    _this.isMaximizable = false;\n    _this.isMaximized = false;\n    _this.maximizeListeners = [];\n    _this.movable = false;\n    _this.closable = true;\n    _this.isMoving = false;\n    _this.isResizing = false;\n    _this.dragStartPosition = {\n      x: 0,\n      y: 0\n    };\n    _this.position = {\n      x: 0,\n      y: 0\n    };\n    _this.size = {\n      width: 0,\n      height: 0\n    };\n    _this.lastPosition = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    _this.config = config;\n    return _this;\n  }\n\n  Dialog.prototype.postConstruct = function () {\n    var _this = this;\n\n    var _a = this.config,\n        alwaysOnTop = _a.alwaysOnTop,\n        component = _a.component,\n        centered = _a.centered,\n        resizable = _a.resizable,\n        movable = _a.movable,\n        maximizable = _a.maximizable,\n        closable = _a.closable,\n        title = _a.title,\n        minWidth = _a.minWidth,\n        width = _a.width,\n        minHeight = _a.minHeight,\n        height = _a.height;\n    var _b = this.config,\n        x = _b.x,\n        y = _b.y;\n    var eGui = this.getGui();\n    this.popupParent = this.popupService.getPopupParent();\n    this.minHeight = minHeight != null ? minHeight : 250;\n    this.minWidth = minWidth != null ? minWidth : 250;\n\n    if (component) {\n      this.setBodyComponent(component);\n    }\n\n    if (resizable) {\n      this.setResizable(resizable);\n    }\n\n    if (title) {\n      this.setTitle(title);\n    }\n\n    if (this.isResizable && maximizable) {\n      this.setMaximizable(maximizable);\n    }\n\n    this.setMovable(!!movable);\n    this.setClosable(closable != null ? closable : this.closable);\n\n    if (width) {\n      utils_1._.setFixedWidth(eGui, width);\n\n      this.size.width = width;\n    }\n\n    if (height) {\n      utils_1._.setFixedHeight(eGui, height);\n\n      this.size.height = height;\n    }\n\n    this.close = this.popupService.addPopup(false, eGui, true, this.destroy.bind(this));\n\n    if (alwaysOnTop) {\n      eGui.style.zIndex = '6';\n    }\n\n    this.refreshSize();\n    eGui.focus();\n\n    if (centered) {\n      x = eGui.offsetParent.clientWidth / 2 - this.getWidth() / 2;\n      y = eGui.offsetParent.clientHeight / 2 - this.getHeight() / 2;\n    }\n\n    if (x || y) {\n      this.offsetDialog(x, y);\n    }\n\n    this.addDestroyableEventListener(this.eTitleBar, 'mousedown', function (e) {\n      if (eGui.contains(e.relatedTarget) || eGui.contains(document.activeElement)) {\n        return;\n      }\n\n      var focusEl = _this.eContentWrapper.querySelector('button, [href], input, select, textarea, [tabindex]');\n\n      if (focusEl) {\n        focusEl.focus();\n      }\n    });\n    this.addDestroyableEventListener(eGui, 'focusin', function (e) {\n      if (eGui.contains(e.relatedTarget)) {\n        return;\n      }\n\n      _this.popupService.bringPopupToFront(eGui);\n    });\n  };\n\n  Dialog.prototype.updateDragStartPosition = function (x, y) {\n    this.dragStartPosition = {\n      x: x,\n      y: y\n    };\n  };\n\n  Dialog.prototype.getResizerElement = function (side) {\n    var map = {\n      topLeft: this.eTopLeftResizer,\n      top: this.eTopResizer,\n      topRight: this.eTopRightResizer,\n      right: this.eRightResizer,\n      bottomRight: this.eBottomRightResizer,\n      bottom: this.eBottomResizer,\n      bottomLeft: this.eBottomLeftResizer,\n      left: this.eLeftResizer\n    };\n    return map[side];\n  };\n\n  Dialog.prototype.setResizable = function (resizable) {\n    var _this = this;\n\n    var isResizable = false;\n\n    if (typeof resizable === 'boolean') {\n      resizable = {\n        topLeft: resizable,\n        top: resizable,\n        topRight: resizable,\n        right: resizable,\n        bottomRight: resizable,\n        bottom: resizable,\n        bottomLeft: resizable,\n        left: resizable\n      };\n    }\n\n    Object.keys(resizable).forEach(function (side) {\n      var r = resizable;\n      var s = side;\n      var val = !!r[s];\n\n      var el = _this.getResizerElement(s);\n\n      var params = {\n        eElement: el,\n        onDragStart: _this.onDialogResizeStart.bind(_this),\n        onDragging: function (e) {\n          return _this.onDialogResize(e, s);\n        },\n        onDragStop: _this.onDialogResizeEnd.bind(_this)\n      };\n\n      if (!!_this.resizable[s] !== val) {\n        if (val) {\n          _this.dragService.addDragSource(params);\n\n          el.style.pointerEvents = 'all';\n          isResizable = true;\n        } else {\n          _this.dragService.removeDragSource(params);\n\n          el.style.pointerEvents = 'none';\n        }\n      }\n    });\n    this.isResizable = isResizable;\n  };\n\n  Dialog.prototype.onDialogResizeStart = function (e) {\n    this.isResizing = true;\n    this.updateDragStartPosition(e.clientX, e.clientY);\n  };\n\n  Dialog.prototype.calculateMouseMovement = function (params) {\n    var parentRect = this.popupParent.getBoundingClientRect();\n    var e = params.e,\n        isLeft = params.isLeft,\n        isTop = params.isTop,\n        anywhereWithin = params.anywhereWithin,\n        topBuffer = params.topBuffer;\n    var movementX = e.clientX - this.dragStartPosition.x;\n    var movementY = e.clientY - this.dragStartPosition.y;\n    var width = this.getWidth();\n    var height = this.getHeight(); // skip if cursor is outside of popupParent horizontally\n\n    var skipX = parentRect.left >= e.clientX && this.position.x <= 0 || parentRect.right <= e.clientX && parentRect.right <= this.position.x + parentRect.left + width;\n\n    if (!skipX) {\n      if (isLeft) {\n        skipX = // skip if we are moving to the left and the cursor\n        // is positioned to the right of the left side anchor\n        movementX < 0 && e.clientX > this.position.x + parentRect.left || // skip if we are moving to the right and the cursor\n        // is positioned to the left of the dialog\n        movementX > 0 && e.clientX < this.position.x + parentRect.left;\n      } else {\n        if (anywhereWithin) {\n          // if anywhereWithin is true, we allow to move\n          // as long as the cursor is within the dialog\n          skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left + width || movementX > 0 && e.clientX < this.position.x + parentRect.left;\n        } else {\n          skipX = // if the movement is bound to the right side of the dialog\n          // we skip if we are moving to the left and the cursor\n          // is to the right of the dialog\n          movementX < 0 && e.clientX > this.position.x + parentRect.left + width || // or skip if we are moving to the right and the cursor\n          // is to the left of the right side anchor\n          movementX > 0 && e.clientX < this.position.x + parentRect.left + width;\n        }\n      }\n    }\n\n    movementX = skipX ? 0 : movementX;\n    var skipY = // skip if cursor is outside of popupParent vertically\n    parentRect.top >= e.clientY && this.position.y <= 0 || parentRect.bottom <= e.clientY && parentRect.bottom <= this.position.y + parentRect.top + height || isTop && ( // skip if we are moving to towards top and the cursor is\n    // below the top anchor + topBuffer\n    // note: topBuffer is used when moving the dialog using the title bar\n    movementY < 0 && e.clientY > this.position.y + parentRect.top + (topBuffer || 0) || // skip if we are moving to the bottom and the cursor is\n    // above the top anchor\n    movementY > 0 && e.clientY < this.position.y + parentRect.top) || // we are anchored to the bottom of the dialog\n    !isTop && ( // skip if we are moving towards the top and the cursor\n    // is below the bottom anchor\n    movementY < 0 && e.clientY > this.position.y + parentRect.top + height || // skip if we are moving towards the bottom and the cursor\n    // is above the bottom anchor\n    movementY > 0 && e.clientY < this.position.y + parentRect.top + height);\n    movementY = skipY ? 0 : movementY;\n    return {\n      movementX: movementX,\n      movementY: movementY\n    };\n  };\n\n  Dialog.prototype.onDialogResize = function (e, side) {\n    if (!this.isResizing) {\n      return;\n    }\n\n    var isLeft = !!side.match(/left/i);\n    var isRight = !!side.match(/right/i);\n    var isTop = !!side.match(/top/i);\n    var isBottom = !!side.match(/bottom/i);\n    var isHorizontal = isLeft || isRight;\n    var isVertical = isTop || isBottom;\n\n    var _a = this.calculateMouseMovement({\n      e: e,\n      isLeft: isLeft,\n      isTop: isTop\n    }),\n        movementX = _a.movementX,\n        movementY = _a.movementY;\n\n    var offsetLeft = 0;\n    var offsetTop = 0;\n\n    if (isHorizontal && movementX) {\n      var direction = isLeft ? -1 : 1;\n      var oldWidth = this.getWidth();\n      var newWidth = oldWidth + movementX * direction;\n      var skipWidth = false;\n\n      if (isLeft) {\n        offsetLeft = oldWidth - newWidth;\n\n        if (this.position.x + offsetLeft <= 0 || newWidth <= this.minWidth) {\n          skipWidth = true;\n          offsetLeft = 0;\n        }\n      }\n\n      if (!skipWidth) {\n        this.setWidth(newWidth);\n      }\n    }\n\n    if (isVertical && movementY) {\n      var direction = isTop ? -1 : 1;\n      var oldHeight = this.getHeight();\n      var newHeight = oldHeight + movementY * direction;\n      var skipHeight = false;\n\n      if (isTop) {\n        offsetTop = oldHeight - newHeight;\n\n        if (this.position.y + offsetTop <= 0 || newHeight <= this.minHeight) {\n          skipHeight = true;\n          offsetTop = 0;\n        }\n      }\n\n      if (!skipHeight) {\n        this.setHeight(newHeight);\n      }\n    }\n\n    this.updateDragStartPosition(e.clientX, e.clientY);\n\n    if (offsetLeft || offsetTop) {\n      this.offsetDialog(this.position.x + offsetLeft, this.position.y + offsetTop);\n    }\n\n    this.isMaximized = false;\n  };\n\n  Dialog.prototype.onDialogResizeEnd = function () {\n    this.isResizing = false;\n  };\n\n  Dialog.prototype.refreshSize = function () {\n    var _a = this.size,\n        width = _a.width,\n        height = _a.height;\n\n    if (!width) {\n      this.setWidth(this.getGui().offsetWidth);\n    }\n\n    if (!height) {\n      this.setHeight(this.getGui().offsetHeight);\n    }\n  };\n\n  Dialog.prototype.setMovable = function (movable) {\n    if (movable !== this.movable) {\n      this.movable = movable;\n      var params = {\n        eElement: this.eTitleBar,\n        onDragStart: this.onDialogMoveStart.bind(this),\n        onDragging: this.onDialogMove.bind(this),\n        onDragStop: this.onDialogMoveEnd.bind(this)\n      };\n      this.dragService[movable ? 'addDragSource' : 'removeDragSource'](params);\n    }\n  };\n\n  Dialog.prototype.onDialogMoveStart = function (e) {\n    this.isMoving = true;\n    this.updateDragStartPosition(e.clientX, e.clientY);\n  };\n\n  Dialog.prototype.onDialogMove = function (e) {\n    if (!this.isMoving) {\n      return;\n    }\n\n    var _a = this.position,\n        x = _a.x,\n        y = _a.y;\n\n    var _b = this.calculateMouseMovement({\n      e: e,\n      isTop: true,\n      anywhereWithin: true,\n      topBuffer: this.getHeight() - this.getBodyHeight()\n    }),\n        movementX = _b.movementX,\n        movementY = _b.movementY;\n\n    this.offsetDialog(x + movementX, y + movementY);\n    this.updateDragStartPosition(e.clientX, e.clientY);\n  };\n\n  Dialog.prototype.offsetDialog = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    var ePopup = this.getGui();\n    this.popupService.positionPopup({\n      ePopup: ePopup,\n      x: x,\n      y: y,\n      minWidth: this.minWidth,\n      minHeight: this.minHeight,\n      keepWithinBounds: true\n    });\n    this.position.x = parseInt(ePopup.style.left, 10);\n    this.position.y = parseInt(ePopup.style.top, 10);\n  };\n\n  Dialog.prototype.onDialogMoveEnd = function () {\n    this.isMoving = false;\n  };\n\n  Dialog.prototype.setClosable = function (closable) {\n    if (closable !== this.closable) {\n      this.closable = closable;\n    }\n\n    if (closable) {\n      var closeButtonComp = this.closeButtonComp = new component_1.Component(Dialog.CLOSE_BTN_TEMPLATE);\n      this.addTitleBarButton(closeButtonComp);\n      closeButtonComp.addDestroyableEventListener(closeButtonComp.getGui(), 'click', this.onBtClose.bind(this));\n    } else if (this.closeButtonComp) {\n      this.closeButtonComp.destroy();\n      this.closeButtonComp = undefined;\n    }\n  };\n\n  Dialog.prototype.setMaximizable = function (maximizable) {\n    if (maximizable === false) {\n      this.clearMaximizebleListeners();\n\n      if (this.maximizeButtonComp) {\n        this.maximizeButtonComp.destroy();\n        this.maximizeButtonComp = undefined;\n      }\n\n      return;\n    }\n\n    var eTitleBar = this.eTitleBar;\n\n    if (!this.isResizable || !eTitleBar || maximizable === this.isMaximizable) {\n      return;\n    }\n\n    var maximizeButtonComp = this.maximizeButtonComp = new component_1.Component(Dialog.MAXIMIZE_BTN_TEMPLATE);\n    maximizeButtonComp.addDestroyableEventListener(maximizeButtonComp.getGui(), 'click', this.toggleMaximize.bind(this));\n    this.addTitleBarButton(maximizeButtonComp, 0);\n    this.maximizeListeners.push(this.addDestroyableEventListener(eTitleBar, 'dblclick', this.toggleMaximize.bind(this)));\n  };\n\n  Dialog.prototype.toggleMaximize = function () {\n    var maximizeButton = this.maximizeButtonComp.getGui();\n    var maximizeEl = maximizeButton.querySelector('.ag-icon-maximize');\n    var minimizeEl = maximizeButton.querySelector('.ag-icon-minimize');\n\n    if (this.isMaximized) {\n      var _a = this.lastPosition,\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n      this.setWidth(width);\n      this.setHeight(height);\n      this.offsetDialog(x, y);\n    } else {\n      this.lastPosition.width = this.getWidth();\n      this.lastPosition.height = this.getHeight();\n      this.lastPosition.x = this.position.x;\n      this.lastPosition.y = this.position.y;\n      this.offsetDialog(0, 0);\n      this.setHeight(Infinity);\n      this.setWidth(Infinity);\n    }\n\n    this.isMaximized = !this.isMaximized;\n\n    utils_1._.addOrRemoveCssClass(maximizeEl, 'ag-hidden', this.isMaximized);\n\n    utils_1._.addOrRemoveCssClass(minimizeEl, 'ag-hidden', !this.isMaximized);\n  };\n\n  Dialog.prototype.clearMaximizebleListeners = function () {\n    if (this.maximizeListeners.length) {\n      this.maximizeListeners.forEach(function (destroyListener) {\n        return destroyListener();\n      });\n      this.maximizeListeners.length = 0;\n    }\n  };\n\n  Dialog.prototype.setBodyComponent = function (bodyComponent) {\n    bodyComponent.setParentComponent(this);\n    this.eContentWrapper.appendChild(bodyComponent.getGui());\n  };\n\n  Dialog.prototype.addTitleBarButton = function (button, position) {\n    var eTitleBarButtons = this.eTitleBarButtons;\n    var buttons = eTitleBarButtons.children;\n    var len = buttons.length;\n\n    if (position == null) {\n      position = len;\n    }\n\n    position = Math.max(0, Math.min(position, len));\n    var eGui = button.getGui();\n\n    utils_1._.addCssClass(eGui, 'ag-dialog-button');\n\n    if (position === 0) {\n      eTitleBarButtons.insertAdjacentElement('afterbegin', eGui);\n    } else if (position === len) {\n      eTitleBarButtons.insertAdjacentElement('beforeend', eGui);\n    } else {\n      buttons[position - 1].insertAdjacentElement('afterend', eGui);\n    }\n\n    button.setParentComponent(this);\n  };\n\n  Dialog.prototype.getBodyHeight = function () {\n    return utils_1._.getInnerHeight(this.eContentWrapper);\n  };\n\n  Dialog.prototype.getBodyWidth = function () {\n    return utils_1._.getInnerWidth(this.eContentWrapper);\n  };\n\n  Dialog.prototype.setTitle = function (title) {\n    this.eTitle.innerText = title;\n  };\n\n  Dialog.prototype.getHeight = function () {\n    return this.size.height;\n  };\n\n  Dialog.prototype.setHeight = function (height) {\n    var newHeight = Math.max(this.minHeight, height);\n    var eGui = this.getGui();\n\n    if (newHeight + this.position.y > eGui.offsetParent.clientHeight) {\n      newHeight = eGui.offsetParent.clientHeight - this.position.y;\n    }\n\n    if (this.size.height === newHeight) {\n      return;\n    }\n\n    this.size.height = newHeight;\n\n    utils_1._.setFixedHeight(eGui, newHeight);\n\n    utils_1._.setFixedHeight(this.eContentWrapper, eGui.clientHeight - this.eTitleBar.offsetHeight);\n  };\n\n  Dialog.prototype.getWidth = function () {\n    return this.size.width;\n  };\n\n  Dialog.prototype.setWidth = function (width) {\n    var newWidth = Math.max(this.minWidth, width);\n    var eGui = this.getGui();\n\n    if (newWidth + this.position.x > eGui.offsetParent.clientWidth) {\n      newWidth = eGui.offsetParent.clientWidth - this.position.x;\n    }\n\n    if (this.size.width === newWidth) {\n      return;\n    }\n\n    this.size.width = newWidth;\n\n    utils_1._.setFixedWidth(eGui, newWidth);\n  }; // called when user hits the 'x' in the top right\n\n\n  Dialog.prototype.onBtClose = function () {\n    this.close();\n  };\n\n  Dialog.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.closeButtonComp) {\n      this.closeButtonComp.destroy();\n      this.closeButtonComp = undefined;\n    }\n\n    if (this.maximizeButtonComp) {\n      this.maximizeButtonComp.destroy();\n      this.maximizeButtonComp = undefined;\n    }\n\n    this.clearMaximizebleListeners();\n    var eGui = this.getGui();\n\n    if (eGui && eGui.offsetParent) {\n      this.close();\n    }\n  };\n\n  Dialog.TEMPLATE = \"<div class=\\\"ag-dialog\\\" tabindex=\\\"-1\\\">\\n            <div class=\\\"ag-resizer-wrapper\\\">\\n                <div ref=\\\"eTopLeftResizer\\\" class=\\\"ag-resizer ag-resizer-topLeft\\\"></div>\\n                <div ref=\\\"eTopResizer\\\" class=\\\"ag-resizer ag-resizer-top\\\"></div>\\n                <div ref=\\\"eTopRightResizer\\\" class=\\\"ag-resizer ag-resizer-topRight\\\"></div>\\n                <div ref=\\\"eRightResizer\\\" class=\\\"ag-resizer ag-resizer-right\\\"></div>\\n                <div ref=\\\"eBottomRightResizer\\\" class=\\\"ag-resizer ag-resizer-bottomRight\\\"></div>\\n                <div ref=\\\"eBottomResizer\\\" class=\\\"ag-resizer ag-resizer-bottom\\\"></div>\\n                <div ref=\\\"eBottomLeftResizer\\\" class=\\\"ag-resizer ag-resizer-bottomLeft\\\"></div>\\n                <div ref=\\\"eLeftResizer\\\" class=\\\"ag-resizer ag-resizer-left\\\"></div>\\n            </div>\\n            <div ref=\\\"eTitleBar\\\" class=\\\"ag-dialog-title-bar ag-unselectable\\\">\\n                <span ref=\\\"eTitle\\\" class=\\\"ag-dialog-title-bar-title\\\"></span>\\n                <div ref=\\\"eTitleBarButtons\\\" class=\\\"ag-dialog-title-bar-buttons\\\"></div>\\n            </div>\\n            <div ref=\\\"eContentWrapper\\\" class=\\\"ag-dialog-content-wrapper\\\"></div>\\n        </div>\";\n  Dialog.CLOSE_BTN_TEMPLATE = \"<div class=\\\"ag-dialog-button\\\">\\n            <span class=\\\"ag-icon ag-icon-cross\\\"></span>\\n        </div>\\n        \";\n  Dialog.MAXIMIZE_BTN_TEMPLATE = \"<div class=\\\"ag-dialog-button\\\">\\n            <span class=\\\"ag-icon ag-icon-maximize\\\"></span>\\n            <span class=\\\"ag-icon ag-icon-minimize ag-hidden\\\"></span>\\n        </span>\\n        \";\n\n  __decorate([context_1.Autowired('dragService'), __metadata(\"design:type\", dragService_1.DragService)], Dialog.prototype, \"dragService\", void 0);\n\n  __decorate([context_1.Autowired('popupService'), __metadata(\"design:type\", popupService_1.PopupService)], Dialog.prototype, \"popupService\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eContentWrapper'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eContentWrapper\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eTitleBar'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eTitleBar\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eTitleBarButtons'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eTitleBarButtons\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eTitle'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eTitle\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eTopLeftResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eTopLeftResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eTopResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eTopResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eTopRightResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eTopRightResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eRightResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eRightResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eBottomRightResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eBottomRightResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eBottomResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eBottomResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eBottomLeftResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eBottomLeftResizer\", void 0);\n\n  __decorate([componentAnnotations_1.RefSelector('eLeftResizer'), __metadata(\"design:type\", HTMLElement)], Dialog.prototype, \"eLeftResizer\", void 0);\n\n  __decorate([context_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], Dialog.prototype, \"postConstruct\", null);\n\n  return Dialog;\n}(popupComponent_1.PopupComponent);\n\nexports.Dialog = Dialog;","map":null,"metadata":{},"sourceType":"script"}